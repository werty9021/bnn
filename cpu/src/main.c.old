#include <stdio.h>
#include <string.h>
#include <time.h>
#include "print_arrays.h"

void conv2d(int Do, int Di, int Dy, int Dx, int Ky, int Kx, float input[Di][(Dy - 1) + Ky][(Dx - 1) + Kx], float weights[Do][Di][Ky][Kx], float output[Do][Dy][Dx]){
    for(int z = 0; z < Do; z++){
        for(int i = 0; i < Di; i++) {
            for(int y = 0; y < Dy; y++) {
                for(int x = 0; x < Dx; x++) {
                    for(int k = 0; k < Ky; k++) {
                        for(int l = 0; l < Kx; l++) {
                            // printf("%f * %f + %f=", input[i][y + k][x + l], weights[z][i][k][l], output[z][y][x]);
                            output[z][y][x] += input[i][y + k][x + l] * weights[z][i][k][l];
                            // printf("%f; y=%d, x=%d, k=%d, l=%d\n", output[z][y][x], y, x, k, l);
                        }
                    }
                }
            }
        }
    }
}

void conv2d_2(int Do, int Di, int Dy, int Dx, int Ky, int Kx, float input[Di][Dy][Dx], float weights[Do][Di][Ky][Kx], float output[Do][Dy][Dx]){
    // Padding = 1 on both sides
    int l_start, l_end, k_start, k_end;
    for(int z = 0; z < Do; z++){
        for(int i = 0; i < Di; i++) {
            for(int y = 0; y < Dy; y++) {
                for(int x = 0; x < Dx; x++) {
                    k_start = (y == 0) ? 1 : 0;
                    k_end = (y == Dy - 1) ? (Ky - 1) : Ky;
                    for(int k = k_start; k < k_end; k++) {
                        l_start = (x == 0) ? 1 : 0;
                        l_end = (x == Dx - 1) ? (Kx - 1) : Kx;
                        for(int l = l_start; l < l_end; l++) {
                            output[z][y][x] += input[i][y + k - 1][x + l -1] * weights[z][i][k][l];
                        }
                    }
                }
            }
        }
    }
}


int main(){
    FILE *fp;
    const int H = 481, W = 321;
    const int Ky = 3, Kx = 3;
    const int Do = 15, Di = 1;

    const int Py = 1, Px = 1; //padding
    const int Dy = (H - Ky + 2*Py) + 1, Dx = (W - Kx + 2*Px) + 1; //stride=1; Dy=Dx=50
    
    float input[Di][H][W]; // 1,5,5 -> 1,7,7
    float weights[Do][Di][Ky][Kx]; // 2,1,3,3
    float output[Do][Dy][Dx]; // 2,5,5

    // float *temp2 = &output[0][0][0];
    // for (int i = 0; i < Do*Dy*Dx; i++){
    //     *temp2 = 0;
    //     temp2++;
    // }
    memset(output, 0, sizeof(float)*Do*Dy*Dx);

    fp = fopen("./input.bin", "rb");
    fread(input, sizeof(float), Di*H*W, fp);
    fclose(fp);

    fp = fopen("./weight.bin", "rb");
    fread(weights, sizeof(float), Do*Di*Ky*Kx, fp);
    fclose(fp);

    // print3DFloatArray(1, 5, 5, input);
    // print3DFloatArray(1, 3, 3, weights[0]);

    clock_t begin;
    double time_spent;

    // Pad the input array
    // begin = clock();

    // float temp[Di][H+2*Py][W+2*Px];
    // memset(temp, 1, sizeof(float)*Di*(H+2*Py)*(W+2*Px));
    // for (int z=0;z<Di;z++){
    //     for(int y=0;y<H;y++){
    //         // memcpy(&temp[z][y+Py][Px], &input[z][y][0], W*sizeof(float));
    //         for(int x=0;x<W;x++){
    //             temp[z][y+Py][x+Px] = input[z][y][x];
    //         }
    //     }
    // }
    // time_spent = (double)(clock() - begin) / CLOCKS_PER_SEC;
    // printf("Padding Time0: %f\n", time_spent);
    // begin = clock();
    // conv2d(Do, Di, Dy, Dx, Ky, Kx, temp, weights, output);
    // time_spent = (double)(clock() - begin) / CLOCKS_PER_SEC;
    // printf("Padding Time1: %f\n", time_spent);

    // // Print output
    // // print3DFloatArray(Do, Dy, Dx, output);

    // //reset output to 0
    // memset(output, 0, sizeof(float)*Do*Dy*Dx);

    // Do with skip computations
    begin = clock();
    conv2d_2(Do, Di, Dy, Dx, Ky, Kx, input, weights, output);
    time_spent = (double)(clock() - begin) / CLOCKS_PER_SEC;
    printf("Skip Time: %f\n", time_spent);

    // Print output
    // print3DFloatArray(Do, Dy, Dx, output);

    
    return 0;
}