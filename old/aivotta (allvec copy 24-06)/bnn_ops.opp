<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<osal version="0.1">

  <operation>
    <name>XNORPOPCOUNTACC</name>
    <description/>
    <inputs>3</inputs>
    <outputs>1</outputs>
    <in element-count="1" element-width="32" id="1" type="UIntWord">
      <can-swap>
        <in id="2"/>
      </can-swap>
    </in>
    <in element-count="1" element-width="32" id="2" type="UIntWord">
      <can-swap>
        <in id="1"/>
      </can-swap>
    </in>
    <in element-count="1" element-width="32" id="3" type="UIntWord"/>
    <out element-count="1" element-width="32" id="4" type="UIntWord"/>
  </operation>

  <operation>
    <name>XNORPOPCOUNTACC32X32</name>
    <description/>
    <inputs>3</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="32" id="1" type="UIntWord">
      <can-swap>
        <in id="2"/>
      </can-swap>
    </in>
    <in element-count="32" element-width="32" id="2" type="UIntWord">
      <can-swap>
        <in id="1"/>
      </can-swap>
    </in>
    <in element-count="32" element-width="32" id="3" type="UIntWord"/>
    <out element-count="32" element-width="32" id="4" type="UIntWord"/>
    <trigger-semantics>SimValue a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31;
SimValue b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31;
SimValue c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31;
SimValue o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31;

EXEC_OPERATION(UNPACK32X32, IO(1), a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
EXEC_OPERATION(UNPACK32X32, IO(2), b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31);
EXEC_OPERATION(UNPACK32X32, IO(3), c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31);

EXEC_OPERATION(XNORPOPCOUNTACC, a0, b0, c0, o0);
EXEC_OPERATION(XNORPOPCOUNTACC, a1, b1, c1, o1);
EXEC_OPERATION(XNORPOPCOUNTACC, a2, b2, c2, o2);
EXEC_OPERATION(XNORPOPCOUNTACC, a3, b3, c3, o3);
EXEC_OPERATION(XNORPOPCOUNTACC, a4, b4, c4, o4);
EXEC_OPERATION(XNORPOPCOUNTACC, a5, b5, c5, o5);
EXEC_OPERATION(XNORPOPCOUNTACC, a6, b6, c6, o6);
EXEC_OPERATION(XNORPOPCOUNTACC, a7, b7, c7, o7);
EXEC_OPERATION(XNORPOPCOUNTACC, a8, b8, c8, o8);
EXEC_OPERATION(XNORPOPCOUNTACC, a9, b9, c9, o9);
EXEC_OPERATION(XNORPOPCOUNTACC, a10, b10, c10, o10);
EXEC_OPERATION(XNORPOPCOUNTACC, a11, b11, c11, o11);
EXEC_OPERATION(XNORPOPCOUNTACC, a12, b12, c12, o12);
EXEC_OPERATION(XNORPOPCOUNTACC, a13, b13, c13, o13);
EXEC_OPERATION(XNORPOPCOUNTACC, a14, b14, c14, o14);
EXEC_OPERATION(XNORPOPCOUNTACC, a15, b15, c15, o15);
EXEC_OPERATION(XNORPOPCOUNTACC, a16, b16, c16, o16);
EXEC_OPERATION(XNORPOPCOUNTACC, a17, b17, c17, o17);
EXEC_OPERATION(XNORPOPCOUNTACC, a18, b18, c18, o18);
EXEC_OPERATION(XNORPOPCOUNTACC, a19, b19, c19, o19);
EXEC_OPERATION(XNORPOPCOUNTACC, a20, b20, c20, o20);
EXEC_OPERATION(XNORPOPCOUNTACC, a21, b21, c21, o21);
EXEC_OPERATION(XNORPOPCOUNTACC, a22, b22, c22, o22);
EXEC_OPERATION(XNORPOPCOUNTACC, a23, b23, c23, o23);
EXEC_OPERATION(XNORPOPCOUNTACC, a24, b24, c24, o24);
EXEC_OPERATION(XNORPOPCOUNTACC, a25, b25, c25, o25);
EXEC_OPERATION(XNORPOPCOUNTACC, a26, b26, c26, o26);
EXEC_OPERATION(XNORPOPCOUNTACC, a27, b27, c27, o27);
EXEC_OPERATION(XNORPOPCOUNTACC, a28, b28, c28, o28);
EXEC_OPERATION(XNORPOPCOUNTACC, a29, b29, c29, o29);
EXEC_OPERATION(XNORPOPCOUNTACC, a30, b30, c30, o30);
EXEC_OPERATION(XNORPOPCOUNTACC, a31, b31, c31, o31);

EXEC_OPERATION(PACK32X32, o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31, IO(4));

</trigger-semantics>
  </operation>

  <operation>
    <name>SET_BIT</name>
    <description/>
    <inputs>2</inputs>
    <outputs>1</outputs>
    <in element-count="1" element-width="32" id="1" type="UIntWord"/>
    <in element-count="1" element-width="32" id="2" type="UIntWord"/>
    <out element-count="1" element-width="32" id="3" type="UIntWord"/>
  </operation>

  <operation>
    <name>GTU32X32TO32</name>
    <description/>
    <inputs>2</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="32" id="1" type="UIntWord"/>
    <in element-count="32" element-width="32" id="2" type="UIntWord"/>
    <out element-count="1" element-width="32" id="3" type="UIntWord"/>
  </operation>

  <operation>
    <name>SET_BIT32X32</name>
    <description/>
    <inputs>2</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="32" id="1" type="UIntWord"/>
    <in element-count="32" element-width="32" id="2" type="UIntWord"/>
    <out element-count="32" element-width="32" id="3" type="UIntWord"/>
    <trigger-semantics>SimValue a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31;
SimValue b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31;
SimValue o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31;

EXEC_OPERATION(UNPACK32X32, IO(1), a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
EXEC_OPERATION(UNPACK32X32, IO(2), b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31);


EXEC_OPERATION(SET_BIT, a0, b0, o0);
EXEC_OPERATION(SET_BIT, a1, b1, o1);
EXEC_OPERATION(SET_BIT, a2, b2, o2);
EXEC_OPERATION(SET_BIT, a3, b3, o3);
EXEC_OPERATION(SET_BIT, a4, b4, o4);
EXEC_OPERATION(SET_BIT, a5, b5, o5);
EXEC_OPERATION(SET_BIT, a6, b6, o6);
EXEC_OPERATION(SET_BIT, a7, b7, o7);
EXEC_OPERATION(SET_BIT, a8, b8, o8);
EXEC_OPERATION(SET_BIT, a9, b9, o9);
EXEC_OPERATION(SET_BIT, a10, b10, o10);
EXEC_OPERATION(SET_BIT, a11, b11, o11);
EXEC_OPERATION(SET_BIT, a12, b12, o12);
EXEC_OPERATION(SET_BIT, a13, b13, o13);
EXEC_OPERATION(SET_BIT, a14, b14, o14);
EXEC_OPERATION(SET_BIT, a15, b15, o15);
EXEC_OPERATION(SET_BIT, a16, b16, o16);
EXEC_OPERATION(SET_BIT, a17, b17, o17);
EXEC_OPERATION(SET_BIT, a18, b18, o18);
EXEC_OPERATION(SET_BIT, a19, b19, o19);
EXEC_OPERATION(SET_BIT, a20, b20, o20);
EXEC_OPERATION(SET_BIT, a21, b21, o21);
EXEC_OPERATION(SET_BIT, a22, b22, o22);
EXEC_OPERATION(SET_BIT, a23, b23, o23);
EXEC_OPERATION(SET_BIT, a24, b24, o24);
EXEC_OPERATION(SET_BIT, a25, b25, o25);
EXEC_OPERATION(SET_BIT, a26, b26, o26);
EXEC_OPERATION(SET_BIT, a27, b27, o27);
EXEC_OPERATION(SET_BIT, a28, b28, o28);
EXEC_OPERATION(SET_BIT, a29, b29, o29);
EXEC_OPERATION(SET_BIT, a30, b30, o30);
EXEC_OPERATION(SET_BIT, a31, b31, o31);

EXEC_OPERATION(PACK32X32, o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31, IO(3));

</trigger-semantics>
  </operation>

  <operation>
    <name>MAC16X32TO32X32</name>
    <description>out = a *b +c</description>
    <inputs>3</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="16" id="1" type="RawData">
      <can-swap>
        <in id="2"/>
      </can-swap>
    </in>
    <in element-count="32" element-width="16" id="2" type="RawData">
      <can-swap>
        <in id="1"/>
      </can-swap>
    </in>
    <in element-count="32" element-width="32" id="3" type="SIntWord"/>
    <out element-count="32" element-width="32" id="4" type="SIntWord"/>
    <trigger-semantics>SimValue a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31;
SimValue sa0, sa1, sa2, sa3, sa4, sa5, sa6, sa7, sa8, sa9, sa10, sa11, sa12, sa13, sa14, sa15, sa16, sa17, sa18, sa19, sa20, sa21, sa22, sa23, sa24, sa25, sa26, sa27, sa28, sa29, sa30, sa31;
SimValue sb0, sb1, sb2, sb3, sb4, sb5, sb6, sb7, sb8, sb9, sb10, sb11, sb12, sb13, sb14, sb15, sb16, sb17, sb18, sb19, sb20, sb21, sb22, sb23, sb24, sb25, sb26, sb27, sb28, sb29, sb30, sb31;
SimValue b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31;
SimValue c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31;
SimValue o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31;


EXEC_OPERATION(UNPACK16X32, IO(1), a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
EXEC_OPERATION(UNPACK16X32, IO(2), b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31);
EXEC_OPERATION(UNPACK32X32, IO(3), c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31);

EXEC_OPERATION(SXHW, a0, sa0);
EXEC_OPERATION(SXHW, b0, sb0);
EXEC_OPERATION(MAC, c0, sa0, sb0, o0);
EXEC_OPERATION(SXHW, a1, sa1);
EXEC_OPERATION(SXHW, b1, sb1);
EXEC_OPERATION(MAC, c1, sa1, sb1, o1);
EXEC_OPERATION(SXHW, a2, sa2);
EXEC_OPERATION(SXHW, b2, sb2);
EXEC_OPERATION(MAC, c2, sa2, sb2, o2);
EXEC_OPERATION(SXHW, a3, sa3);
EXEC_OPERATION(SXHW, b3, sb3);
EXEC_OPERATION(MAC, c3, sa3, sb3, o3);
EXEC_OPERATION(SXHW, a4, sa4);
EXEC_OPERATION(SXHW, b4, sb4);
EXEC_OPERATION(MAC, c4, sa4, sb4, o4);
EXEC_OPERATION(SXHW, a5, sa5);
EXEC_OPERATION(SXHW, b5, sb5);
EXEC_OPERATION(MAC, c5, sa5, sb5, o5);
EXEC_OPERATION(SXHW, a6, sa6);
EXEC_OPERATION(SXHW, b6, sb6);
EXEC_OPERATION(MAC, c6, sa6, sb6, o6);
EXEC_OPERATION(SXHW, a7, sa7);
EXEC_OPERATION(SXHW, b7, sb7);
EXEC_OPERATION(MAC, c7, sa7, sb7, o7);
EXEC_OPERATION(SXHW, a8, sa8);
EXEC_OPERATION(SXHW, b8, sb8);
EXEC_OPERATION(MAC, c8, sa8, sb8, o8);
EXEC_OPERATION(SXHW, a9, sa9);
EXEC_OPERATION(SXHW, b9, sb9);
EXEC_OPERATION(MAC, c9, sa9, sb9, o9);
EXEC_OPERATION(SXHW, a10, sa10);
EXEC_OPERATION(SXHW, b10, sb10);
EXEC_OPERATION(MAC, c10, sa10, sb10, o10);
EXEC_OPERATION(SXHW, a11, sa11);
EXEC_OPERATION(SXHW, b11, sb11);
EXEC_OPERATION(MAC, c11, sa11, sb11, o11);
EXEC_OPERATION(SXHW, a12, sa12);
EXEC_OPERATION(SXHW, b12, sb12);
EXEC_OPERATION(MAC, c12, sa12, sb12, o12);
EXEC_OPERATION(SXHW, a13, sa13);
EXEC_OPERATION(SXHW, b13, sb13);
EXEC_OPERATION(MAC, c13, sa13, sb13, o13);
EXEC_OPERATION(SXHW, a14, sa14);
EXEC_OPERATION(SXHW, b14, sb14);
EXEC_OPERATION(MAC, c14, sa14, sb14, o14);
EXEC_OPERATION(SXHW, a15, sa15);
EXEC_OPERATION(SXHW, b15, sb15);
EXEC_OPERATION(MAC, c15, sa15, sb15, o15);
EXEC_OPERATION(SXHW, a16, sa16);
EXEC_OPERATION(SXHW, b16, sb16);
EXEC_OPERATION(MAC, c16, sa16, sb16, o16);
EXEC_OPERATION(SXHW, a17, sa17);
EXEC_OPERATION(SXHW, b17, sb17);
EXEC_OPERATION(MAC, c17, sa17, sb17, o17);
EXEC_OPERATION(SXHW, a18, sa18);
EXEC_OPERATION(SXHW, b18, sb18);
EXEC_OPERATION(MAC, c18, sa18, sb18, o18);
EXEC_OPERATION(SXHW, a19, sa19);
EXEC_OPERATION(SXHW, b19, sb19);
EXEC_OPERATION(MAC, c19, sa19, sb19, o19);
EXEC_OPERATION(SXHW, a20, sa20);
EXEC_OPERATION(SXHW, b20, sb20);
EXEC_OPERATION(MAC, c20, sa20, sb20, o20);
EXEC_OPERATION(SXHW, a21, sa21);
EXEC_OPERATION(SXHW, b21, sb21);
EXEC_OPERATION(MAC, c21, sa21, sb21, o21);
EXEC_OPERATION(SXHW, a22, sa22);
EXEC_OPERATION(SXHW, b22, sb22);
EXEC_OPERATION(MAC, c22, sa22, sb22, o22);
EXEC_OPERATION(SXHW, a23, sa23);
EXEC_OPERATION(SXHW, b23, sb23);
EXEC_OPERATION(MAC, c23, sa23, sb23, o23);
EXEC_OPERATION(SXHW, a24, sa24);
EXEC_OPERATION(SXHW, b24, sb24);
EXEC_OPERATION(MAC, c24, sa24, sb24, o24);
EXEC_OPERATION(SXHW, a25, sa25);
EXEC_OPERATION(SXHW, b25, sb25);
EXEC_OPERATION(MAC, c25, sa25, sb25, o25);
EXEC_OPERATION(SXHW, a26, sa26);
EXEC_OPERATION(SXHW, b26, sb26);
EXEC_OPERATION(MAC, c26, sa26, sb26, o26);
EXEC_OPERATION(SXHW, a27, sa27);
EXEC_OPERATION(SXHW, b27, sb27);
EXEC_OPERATION(MAC, c27, sa27, sb27, o27);
EXEC_OPERATION(SXHW, a28, sa28);
EXEC_OPERATION(SXHW, b28, sb28);
EXEC_OPERATION(MAC, c28, sa28, sb28, o28);
EXEC_OPERATION(SXHW, a29, sa29);
EXEC_OPERATION(SXHW, b29, sb29);
EXEC_OPERATION(MAC, c29, sa29, sb29, o29);
EXEC_OPERATION(SXHW, a30, sa30);
EXEC_OPERATION(SXHW, b30, sb30);
EXEC_OPERATION(MAC, c30, sa30, sb30, o30);
EXEC_OPERATION(SXHW, a31, sa31);
EXEC_OPERATION(SXHW, b31, sb31);
EXEC_OPERATION(MAC, c31, sa31, sb31, o31);


EXEC_OPERATION(PACK32X32, o0, o1, o2, o3, o4, o5, o6, o7, o8, o9, o10, o11, o12, o13, o14, o15, o16, o17, o18, o19, o20, o21, o22, o23, o24, o25, o26, o27, o28, o29, o30, o31, IO(4));


</trigger-semantics>
  </operation>

  <operation>
    <name>VREDUCE32X32</name>
    <description/>
    <inputs>1</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="32" id="1" type="RawData"/>
    <out element-count="1" element-width="32" id="2" type="SIntWord"/>
  </operation>

  <operation>
    <name>GT32X32TO32</name>
    <description/>
    <inputs>2</inputs>
    <outputs>1</outputs>
    <in element-count="32" element-width="32" id="1" type="SIntWord"/>
    <in element-count="32" element-width="32" id="2" type="SIntWord"/>
    <out element-count="1" element-width="32" id="3" type="UIntWord"/>
  </operation>

</osal>
