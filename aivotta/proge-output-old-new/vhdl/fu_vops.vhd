-- Module generated by TTA Codesign Environment
-- 
-- Generated on Thu Sep  5 18:57:55 2019
-- 
-- Function Unit: vOPS
-- 
-- Operations:
--  insertelem16x32 : 0
--  shlsame16x32    : 1
--  truncwh32x32    : 2
--  vbcast16x32     : 3
--  vreduce32x32    : 4
-- 

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_misc.all;

entity fu_vops is
  port (
    clk : in std_logic;
    rstx : in std_logic;
    glock_in : in std_logic;
    glockreq_out : out std_logic;
    operation_in : in std_logic_vector(3-1 downto 0);
    data_in1t_in : in std_logic_vector(1024-1 downto 0);
    load_in1t_in : in std_logic;
    data_in2_in : in std_logic_vector(1024-1 downto 0);
    load_in2_in : in std_logic;
    data_in3_in : in std_logic_vector(32-1 downto 0);
    load_in3_in : in std_logic;
    data_out1_out : out std_logic_vector(1024-1 downto 0));
end entity fu_vops;

architecture rtl of fu_vops is

  constant op_insertelem16x32_c : std_logic_vector(2 downto 0) := "000";
  constant op_shlsame16x32_c : std_logic_vector(2 downto 0) := "001";
  constant op_truncwh32x32_c : std_logic_vector(2 downto 0) := "010";
  constant op_vbcast16x32_c : std_logic_vector(2 downto 0) := "011";
  constant op_vreduce32x32_c : std_logic_vector(2 downto 0) := "100";

  signal operation : std_logic_vector(2 downto 0);
  signal data_in1t : std_logic_vector(1023 downto 0);
  signal data_in2 : std_logic_vector(1023 downto 0);
  signal data_in3 : std_logic_vector(31 downto 0);
  signal insertelem16x32_op1 : std_logic_vector(511 downto 0);
  signal insertelem16x32_op2 : std_logic_vector(15 downto 0);
  signal insertelem16x32_op3 : std_logic_vector(31 downto 0);
  signal insertelem16x32_op4 : std_logic_vector(511 downto 0);
  signal shlsame16x32_op1 : std_logic_vector(511 downto 0);
  signal shlsame16x32_op2 : std_logic_vector(15 downto 0);
  signal shlsame16x32_op3 : std_logic_vector(511 downto 0);
  signal truncwh32x32_op1 : std_logic_vector(1023 downto 0);
  signal truncwh32x32_op2 : std_logic_vector(511 downto 0);
  signal vbcast16x32_op1 : std_logic_vector(15 downto 0);
  signal vbcast16x32_op2 : std_logic_vector(511 downto 0);
  signal vreduce32x32_op1 : std_logic_vector(1023 downto 0);
  signal vreduce32x32_op2 : std_logic_vector(31 downto 0);
  signal operation_insertelem16x32_cycle_0_trigger : std_logic;
  signal operation_shlsame16x32_cycle_0_trigger : std_logic;
  signal operation_truncwh32x32_cycle_0_trigger : std_logic;
  signal operation_vbcast16x32_cycle_0_trigger : std_logic;
  signal operation_vreduce32x32_cycle_0_trigger : std_logic;
  signal operation_0_r : std_logic_vector(2 downto 0);

  signal shadow_in2_r : std_logic_vector(1023 downto 0);
  signal shadow_in3_r : std_logic_vector(31 downto 0);
  signal data_out1_cycle_0_r : std_logic_vector(1023 downto 0);

begin

  operation <= operation_in;
  data_in1t <= data_in1t_in;

  shadow_in2_sp : process(clk)
  begin
    if clk = '1' and clk'event then
      if rstx = '0' then
        shadow_in2_r <= (others => '0');
      else
        if ((glock_in = '0') and (load_in2_in = '1')) then
          shadow_in2_r <= data_in2_in;
        end if;
      end if;
    end if;
  end process shadow_in2_sp;

  shadow_in2_cp : process(shadow_in2_r, load_in1t_in, data_in2_in, load_in2_in)
  begin
    if ((load_in1t_in = '1') and (load_in2_in = '1')) then
      data_in2 <= data_in2_in;
    else
      data_in2 <= shadow_in2_r;
    end if;
  end process shadow_in2_cp;

  shadow_in3_sp : process(clk)
  begin
    if clk = '1' and clk'event then
      if rstx = '0' then
        shadow_in3_r <= (others => '0');
      else
        if ((glock_in = '0') and (load_in3_in = '1')) then
          shadow_in3_r <= data_in3_in;
        end if;
      end if;
    end if;
  end process shadow_in3_sp;

  shadow_in3_cp : process(shadow_in3_r, data_in3_in, load_in1t_in, load_in3_in)
  begin
    if ((load_in1t_in = '1') and (load_in3_in = '1')) then
      data_in3 <= data_in3_in;
    else
      data_in3 <= shadow_in3_r;
    end if;
  end process shadow_in3_cp;

  insertelem16x32_op1 <= data_in1t(511 downto 0);
  insertelem16x32_op2 <= data_in2(15 downto 0);
  insertelem16x32_op3 <= data_in3(31 downto 0);
  shlsame16x32_op1 <= data_in1t(511 downto 0);
  shlsame16x32_op2 <= data_in2(15 downto 0);
  truncwh32x32_op1 <= data_in1t(1023 downto 0);
  vbcast16x32_op1 <= data_in1t(15 downto 0);
  vreduce32x32_op1 <= data_in1t(1023 downto 0);
  operation_0_r <= operation_in;

  operations_actual_cp : process(vreduce32x32_op1, operation_0_r, vbcast16x32_op1, truncwh32x32_op1, insertelem16x32_op2, shlsame16x32_op2, insertelem16x32_op3, load_in1t_in, shlsame16x32_op1, insertelem16x32_op1)
    variable vreduce32x32_sum : signed(32-1 downto 0);
  begin
    operation_insertelem16x32_cycle_0_trigger <= '0';
    insertelem16x32_op4 <= (others => '-');
    insertelem16x32_op4 <= (others => '-');
    operation_shlsame16x32_cycle_0_trigger <= '0';
    shlsame16x32_op3 <= (others => '-');
    operation_truncwh32x32_cycle_0_trigger <= '0';
    truncwh32x32_op2 <= (others => '-');
    operation_vbcast16x32_cycle_0_trigger <= '0';
    vbcast16x32_op2 <= (others => '-');
    operation_vreduce32x32_cycle_0_trigger <= '0';
    vreduce32x32_sum := (others => '-');
    vreduce32x32_sum := (others => '-');
    vreduce32x32_op2 <= (others => '-');
    vreduce32x32_sum := (others => '-');
    if (load_in1t_in = '1') then
      case operation_0_r is
        when op_insertelem16x32_c =>
          for i in 0 to 31 loop
            if(i = to_integer(unsigned(insertelem16x32_op3(4 downto 0)))) then
              insertelem16x32_op4((i+1)*16-1 downto i*16) <= insertelem16x32_op2(15 downto 0);
            else
              insertelem16x32_op4((i+1)*16-1 downto i*16) <= insertelem16x32_op1((i+1)*16-1 downto i*16);
            end if;
          end loop;
          operation_insertelem16x32_cycle_0_trigger <= load_in1t_in;
        when op_shlsame16x32_c =>
          for i in 0 to 31 loop
            shlsame16x32_op3((i+1)*16-1 downto i*16) <= std_logic_vector(shift_left(unsigned(shlsame16x32_op1((i+1)*16-1 downto i*16)), to_integer(unsigned(shlsame16x32_op2(3 downto 0)))));
          end loop;
          operation_shlsame16x32_cycle_0_trigger <= load_in1t_in;
        when op_truncwh32x32_c =>
          for i in 0 to 31 loop
            truncwh32x32_op2((i+1)*16-1 downto i*16) <= truncwh32x32_op1((i+1)*32-17 downto i*32);
          end loop;
          operation_truncwh32x32_cycle_0_trigger <= load_in1t_in;
        when op_vbcast16x32_c =>
          vbcast16x32_op2 <= vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 &
                 vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 &
                 vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 &
                 vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1 & vbcast16x32_op1;
          operation_vbcast16x32_cycle_0_trigger <= load_in1t_in;
        when op_vreduce32x32_c =>
          for i in 0 to 31 loop
            if (i = 0) then
              vreduce32x32_sum := signed(vreduce32x32_op1((i+1)*32-1 downto i*32));  
            else
              vreduce32x32_sum := vreduce32x32_sum + signed(vreduce32x32_op1((i+1)*32-1 downto i*32));
            end if;
          end loop;
          vreduce32x32_op2 <= std_logic_vector(vreduce32x32_sum);
          operation_vreduce32x32_cycle_0_trigger <= load_in1t_in;
        when others =>
      end case;
    end if;
  end process operations_actual_cp;

  operations_cycle_0_sp : process(clk)
  begin
    if clk = '1' and clk'event then
      if rstx = '0' then
        data_out1_cycle_0_r <= (others => '0');
      else
        if (glock_in = '0') then
          if (operation_insertelem16x32_cycle_0_trigger = '1') then
            data_out1_cycle_0_r <= ((1024-1 downto 512 => '0') & insertelem16x32_op4);
          end if;
          if (operation_shlsame16x32_cycle_0_trigger = '1') then
            data_out1_cycle_0_r <= ((1024-1 downto 512 => '0') & shlsame16x32_op3);
          end if;
          if (operation_truncwh32x32_cycle_0_trigger = '1') then
            data_out1_cycle_0_r <= ((1024-1 downto 512 => '0') & truncwh32x32_op2);
          end if;
          if (operation_vbcast16x32_cycle_0_trigger = '1') then
            data_out1_cycle_0_r <= ((1024-1 downto 512 => '0') & vbcast16x32_op2);
          end if;
          if (operation_vreduce32x32_cycle_0_trigger = '1') then
            data_out1_cycle_0_r <= ((1024-1 downto 32 => '0') & vreduce32x32_op2);
          end if;
        end if;
      end if;
    end if;
  end process operations_cycle_0_sp;

  data_out1_out <= data_out1_cycle_0_r;
  glockreq_out <= '0';

end architecture rtl;

